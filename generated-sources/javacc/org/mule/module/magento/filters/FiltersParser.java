/* Generated By:JavaCC: Do not edit this line. FiltersParser.java */
    package org.mule.module.magento.filters;
    import  java.io.ByteArrayInputStream;
    import  com.magento.api.Filters;

        /**
	 * A Magento's filter expression parser.
	 */
        public class FiltersParser implements FiltersParserConstants {

        private FiltersBuilder builder = new FiltersBuilder();

        /**
	 * Parses a filter expression. 
	 * <p>
	 * The syntax used by it is quite simple: it consist of one or more comma-separated 
	 * unary or binary predicates, one for each filter.
	 * Unary predicates are in the form &lt;predicateType&gt;(&lt;targetAttribute&gt;), while binary ones
	 * are in the form &lt;predicateType&gt;(&lt;targetAttribute&gt;, &lt;targetAttributeValue&gt;), where
	 * &lt;predicateType&gt; is any of the supported Magento operators: eq, neq, like, null, etc.
	 * </p>
	 * <p> 
	 * For example, the following expressions creates a filter for entities whose customer id is greater
	 * than 1500, and its deletion date is not null:
	 * <code>gt(customer_id, 1500), notnull(deletion_date)</code>
	 * </p>
	 *
	 * @param expression a nullable expression. in the previously described syntax.
	 *		  Null expressions and empty expressions are interpreted as empty filters  
	 * @return a Filter for the given expression
	 * @throws IllegalArgumentException if the expression can not be parsed
	 */
        public static Filters parse(String expression)  {
                if(org.apache.commons.lang.StringUtils.isEmpty(expression)) {
                  return new Filters();
                }
                try{
                        return new FiltersParser(new ByteArrayInputStream(expression.getBytes())).start();
                } catch(ParseException e){
                   throw new IllegalArgumentException("Syntax error in filter expression", e);
                }
        }

  final public Filters start() throws ParseException {
    simpleExpression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      simpleExpression();
    }
   {if (true) return builder.build();}
    throw new Error("Missing return statement in function");
  }

  final public void simpleExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BINARY_OP:
      binaryExpression();
      break;
    case UNARY_OP:
      unaryFilter();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void binaryExpression() throws ParseException {
  Token operation, variable, value;
    operation = jj_consume_token(BINARY_OP);
    jj_consume_token(OPEN_PAR);
    variable = jj_consume_token(IDENTIFIER);
    jj_consume_token(COMMA);
    value = jj_consume_token(INDIV);
    jj_consume_token(CLOSE_PAR);
     builder.addBinaryExpression(operation.image, variable.image, value.image);
  }

  final public void unaryFilter() throws ParseException {
  Token operation, variable;
    operation = jj_consume_token(UNARY_OP);
    jj_consume_token(OPEN_PAR);
    variable = jj_consume_token(IDENTIFIER);
    jj_consume_token(CLOSE_PAR);
     builder.addUnaryExpression(operation.image, variable.image);
  }

  /** Generated Token Manager. */
  public FiltersParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0xc0,};
   }

  /** Constructor with InputStream. */
  public FiltersParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FiltersParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FiltersParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public FiltersParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FiltersParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public FiltersParser(FiltersParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FiltersParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[14];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
