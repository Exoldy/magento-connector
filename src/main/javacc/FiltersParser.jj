options {
	STATIC = false ;
}
PARSER_BEGIN(FiltersParser)
    package org.mule.components.magento.filters;
    import  Magento.Filters;
    
	public class FiltersParser {
		private FiltersBuilder builder = new FiltersBuilder(); 
	}
PARSER_END(FiltersParser)


SKIP : { " " | "\n" | "\r" | "\t" }
TOKEN : { < COMMA : "," > }
TOKEN : { < BINARY_OP : "from" | "to" | "eq" | "neq" | "like" | "nlike" | "is" | "gt" | "gteq" | "lt" | "lteq" | "nin" | "in" > }
TOKEN : { < UNARY_OP : "null" | "notnull" > }
TOKEN : { < INDIV : < NUMBER > | < STRING > > }
TOKEN : { < NUMBER : ("-")?(["0"-"9"])+ > }
TOKEN : { < STRING : "'" (~["'"])* "'" > }
TOKEN : { < IDENTIFIER : (["a"-"z","A"-"Z","_"])+ > }
TOKEN : { < OPEN_PAR : "(" > }
TOKEN : { < CLOSE_PAR : ")" > }


Filters start() : 
{ }
{ 
  simpleExpression() (<COMMA> simpleExpression())* 
  {return builder.build();}
}

void simpleExpression() :
{}
{ binaryExpression() | unaryFilter() }

void binaryExpression() :
{ Token operation, variable, value; }
{ operation = <BINARY_OP> <OPEN_PAR> 
  variable = <IDENTIFIER> <COMMA> 
  value = <INDIV> <CLOSE_PAR>
  {  builder.addBinaryExpression(operation.image, variable.image, value.image); }
}

void unaryFilter() :
{ Token operation, variable; }
{ operation = <UNARY_OP> <OPEN_PAR> 
  variable = <IDENTIFIER> <CLOSE_PAR>
  {  builder.addUnaryExpression(operation.image, variable.image); }  
}
 

     
